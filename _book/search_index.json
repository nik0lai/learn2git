[
["index.html", "Learn2Git. Introducción a Git y Github 1 Sobre Learn2Git", " Learn2Git. Introducción a Git y Github 1 Sobre Learn2Git Este curso tiene por objetivo dar una introducción breve y práctica al uso de Git y Github. Cada una de las secciones contiene una breve explicación y los pasos (incluyendo código) a seguir para lograr cada una de las tareas que se plantean. Si bien la primera parte del curso se desarrolla utilizando R y RStudio, estas herramientas no son necesarias para el uso de Git ni de Github. Otras plataformas, como MATLAB, cuentan con sus propias integraciones de Git. En cualquier caso, Git puede ser utilizado de forma autonoma utilizando la terminal del computador, o alguna interfaz gráfica como GitKraken. No es necesario tener conocimiento acabado sobre R, RStudio, ni sobre programación para completar el curso. Sí es deseable (aunque no estrictamente necesario) tener alguna familiaridad con programación. "],
["r-y-rstudio.html", "2 R y RStudio 2.1 ¿Por qué RStudio? 2.2 Instalación R y RStudio", " 2 R y RStudio R es un lenguaje de programación de código abierto usado ampliamente para estadística, minería de datos, y desarrollo de software. RStudio es un entorno de desarrollo integrado (IDE) para R. Puesto en otras palabras, RStudio es una interfaz gráfica que utiliza, facilita y aumenta la potencialidad de R. 2.1 ¿Por qué RStudio? La mecánica y funciones de Git pueden ser difíciles de entender si la primera aproximación que tenemos es a través del Terminal del computador. Sobre todo si no tenemos familiaridad con la Terminal. Para reducir la complejidad que supone enfrentarse a Git y la Terminal por primera vez, la primera parte del curso se desarrolla utilizando Git a través de RStudio. Sin embargo, existen herramientas de Git que sólo pueden ser utilizadas mediante Terminal. La parte del curso que trata estas herramientas se desarrolla exclusivamente utilizando la Terminal. 2.2 Instalación R y RStudio 2.2.1 Ya tengo RStudio Si ya tienes R y RStudio (ahora mismo no es importante cuál es la diferencia entre ambos. Si tienes RStudio probablemente tienes R) sólo asegurate de tener la última versión en Help &gt; Check for Updates. Si no tienes la última versión presiona Quit and Download, esto cerrará RStudio y te llevará a la página donde podrás encontrar la última versión. En ella debes bajar hasta la sección Installers for Supported Platforms. 2.2.2 No tengo RStudio Si no tienes R ni RStudio tendrás que instalar ambos. Descarga e instala R desde aquí https://cloud.r-project.org. Descarga e instala RStudio desde aquí (debes avanzar hasta la sección Desktop Version) https://www.rstudio.com/products/rstudio/download/preview/ Una vez que hayas instalado ambos, abre RStudio y ejecuta la siguiente linea en la consola: update.packages(ask = FALSE, checkBuilt = TRUE) "],
["instalacion-git.html", "3 Instalación Git 3.1 Instalación Windows y Mac 3.2 Instalación Linux", " 3 Instalación Git Es posible que ya tengas Git, pero instalar la última versión es una buena práctica y nos ahorrará problemas futuros. 3.1 Instalación Windows y Mac Pueden descargar el instalador de Git en: MAC OS: https://git-scm.com/download/mac WINDOWS: https://git-scm.com/download/win Una vez descargado el archivo, pueden instalarlo como instalarían cualquier otro programa. 3.2 Instalación Linux Para instalar Git en Ubuntu deben ejecutar las siguientes lineas (una a la vez) en la terminal: sudo apt update sudo apt install git Para otras distribuciones Linux pueden visitar la siguiente página: https://git-scm.com/download/linux. "],
["git-y-tu-el-primer-encuentro.html", "4 Git y tu, el primer encuentro", " 4 Git y tu, el primer encuentro Las acciones que realizar en Git quedan registradas junto con información sobre el autor de la acción, fecha y hora, además de un código identificador único en el caso de commits y merges. Para que Git sepa quien eres y pueda registrar acciones bajo tu nombre, es necesario decirle quién eres, junto con otra información. En la terminal de RStudio ejecuta (una a la vez) las siguientes lineas (substituye nombre e email con tu información; Ojo que las comillas que envuelven el nombre e email deben ser conservadas): git config --global user.name &#39;Nicolas Sanchez&#39; git config --global user.mail &#39;nicolas.csanchez@gmail.com&#39; git config --global --list Puedes acceder a la terminal desde RStudio en Tools &gt; Terminal &gt; New Terminal o Tools &gt; Shell. Fig. 0 Terminal en RStudio Ten en cuenta que los commits que hagas llevarán el nombre de usuario que escojas, por lo que debería ser informativo para otras personas que trabajen contigo. Las dos primeras lineas no imprimirán nada en la terminal (es decir, al ejecutarlas no recibirás una respuesta), la tercera linea (git config --global --list) imprimirá el nombre y correo electrónico que escogiste en las dos lineas anteriores (Fig. 1.). Fig. 1. Terminal luego de ejecutar git config --global --list "],
["repositorio-local-utilizando-un-r-project.html", "5 Repositorio local utilizando un R Project", " 5 Repositorio local utilizando un R Project Sacado de Curating Research… 5.0.1 ¿Qué es un repositorio? Un repositorio es simplemente el lugar donde almacenaremos los documentos, recursos como imágenes, scripts de códigos, datos, resultados, y en general cualquier recurso de un proyecto. En la sección sobre GitHub veremos cómo configurar un repositorio remoto al que podremos acceder desde cualquier parte, y que además estará disponible para cualquier persona si así lo deseamos. Por ahora trabajaremos con un repositorio local. 5.0.2 Crear Proyecto en RStudio Para crear un proyecto en RStudio iremos a File &gt; New Project, esto abrirá un cuadro de diálogo preguntando si queremos crear un proyecto en un nuevo directorio, en un directorio que ya existe, o recuperar un proyecto de un directorio que ya tiene control de versión. En este caso crearemos un nuevo directorio, así que seleccionaremos New Directory y luego a New Project. Fig. 2. Ventana para crear nuevo proyecto (1) Fig. 3. Ventana para crear nuevo proyecto (2) Tendremos que darle un nombre al proyecto y elegir un directorio para ubicar la carpeta del nuevo proyecto. También seleccionaremos la opción Create a git repository para crear automáticamente un repositorio Git junto con nuestro proyecto R. Fig. 4. Ventana para crear nuevo proyecto (3) Después de seleccionar Create Project se creará la carpeta en la dirección que hemos escogido y dos archivos en su interior: .gitignore, y repositorio-ejemplo.Rproj (repositorio-ejemplo es el nombre que le has dado al proyecto) repositorio-ejemplo.Rproj es un archivo de texto plano (sin formato) que contiene la configuración del proyecto (puedes cambiar la configuración en Tools &gt; Project Options en RStudio). "],
["commit-commit-commit.html", "6 Commit, commit, commit 6.1 Panel Git en RStudio 6.2 Commit 6.3 Primer commit", " 6 Commit, commit, commit 6.1 Panel Git en RStudio Si hemos hecho todo bien hasta ahora podremos ver el panel Git en la sección superior derecha de RStudio. En este panel aparecen los archivos que mencionamos antes y los botones con los principales comandos de Git. Fig. 5. Panel Git: Nuevo proyecto 6.2 Commit Hacer un commit es básicamente registrar los cambios hechos en el repositorio. Esto significa que git creará una especie de fotografía o registro del estado en que se encuentran todos los archivos al momento del commit. En la práctica, dado que muchas veces sólo algunos archivos cambiarán, Git registra solamente los archivos que cambian y asume que el resto se mantiene igual a su versión anterior. Los commit que hagas quedarán registrados en un historial donde podrás ver los cambios de cada archivo y que te permitirá volver a las versiones anteriores de los archivos o del proyecto completo si así lo deseas. 6.3 Primer commit Haremos el primer commit de nuestro proyecto para registrar su estado inicial. Cada vez que hagamos un commit tendrás que ver qué cambios has hecho, qué cambios quieres incluir en el commit, y realizar el commit. 6.3.1 ¿Qué ha cambiado? Podemos ver los archivos que registran cambios en el panel de Git. Para ver los cambios de forma más detallada seleccionaremos Commit en el panel de Git. Se abrirá otra ventana donde podrás seleccionar los archivos con cambios. En este caso, los archivos que se crearon nuestro proyecto tendrán dos signos de interrogación amarillos, esto significa que son archivos nuevos y que los cambios aun no están siendo seguidos por Git. Fig. 6. Panel Git: Ventana Commit 6.3.2 ¿Qué voy a incluir en el commit? Dado que nuestro objetivo es registrar el estado inicial de nuestro proyecto, seleccionaremos los dos archivos que se han creado con nuestro proyecto. Para incluirlos en el commit debemos llevarlos al Stage, para esto marcamos la casilla de la columna Staged junto al nombre de cada archivo. Al hacer esto el estatus cambiará a una A verde. Adicionalmente, al seleccionar los archivos, en la parte inferior de la ventana podrás ver las lineas que han cambiado. Las lineas verdes son aquellas que se han creado. En este caso todas las lineas son verdes ya que ambos archivos son nuevos. Fig. 7. Panel Git: Ventana Commit 6.3.3 Commit! Ahora que hemos seleccionado los archivos podemos crear un commit que quedará en la historia de cambios de nuestro proyecto. Antes de seleccionar Commit tendremos que escribir un mensaje corto en la casilla bajo Commit message. Este mensaje debería decir de forma concisa qué ha cambiado y por qué. Intenta ser lo más claro y breve posible, ya que esto será fundamental cuando vuelvas a la historia de tu repositorio en busca de algún cambio en particular. Una vez que le des a Commit una ventana con el resumen de los cambios que has incluido en el commit aparecerá. Enesta ventana podrás ver que 2 archivos cambiaron, y que estos cambios consisten en 17 lineas que fueron insertadas (2 files changed, 17 insertions(+)). Fig. 8. Panel Git: Ventana Commit 6.3.4 Por favor README! Cada vez que crees un repositorio, o en general un proyecto, es bueno que lo acompañes de una breve descripción que indique el tema y cualquier información relevante para alguien que se enfrente a tu proyecto por primera vez. Si bien esto puede parecer innecesario si estás trabajando sólo, será de gran ayuda si por alguna dejas de trabajar en tu proyecto y lo retomas semanas o meses después. Mientras menos cosas dependan de tu memoria, menos cosas saldrán mal. Generalmente la descripción del proyecto se encuentra en un archivo README. Para que el archivo sea compatible con Git, crearemos un archivo de texto plano (.txt, no Microsoft Word ni similares). 6.3.5 Crea un nuevo archivo Crearemos este nuevo archivo seleccionando File &gt; New File &gt; Text File en RStudio y lo guardaremos en la carpeta principal del proyecto que hemos creado, en mi caso: learn2git/README.txt El nuevo archivo aparecerá en el panel Git con signos de interrogación amarillos junto al nombre (recuerda, dos signos de interrogación amarillos indican archivos nuevos). Ahora puedes escribir una descripción en el archivo README que has creado y guardarlo nuevamente. Fig. 8. Panel Git: Ventana Commit Una vez que hayas terminado la descripción de tu proyecto, guarda el archivo y en el panel de Git llevalo al Stage, escribe un mensaje para tu commit, y selecciona Commit para registrar la forma inicial de tu archivo README en la historia Git de tu proyecto. Has creado tu segundo commit y Git ahora registrará los cambios que hagas en tu archivo README. 6.3.6 Cambia, todo cambia Git registrará cualquier cambio que hagas a los archivos que has incluido en los dos commit que has hecho hasta ahora. Los cambios siempre se registrán en comparación a la última versión que incluiste en un commit. Abre el archivo README, agrega una linea al final y guarda el archivo. En el panel Git el Status del archivo README cambiará a una M de color azul, esto significa Modificado (modified). Para ver cuál fue la modificación selecciona Commit en el panel Git y luego selecciona el archivo que has modificado. En la parte inferior de la ventana podrás ver las nuevas lineas resaltadas con verde y las lineas antiguas (las que ya no existen) resaltadas con rojo. Fig. 9. Panel Git: Ventana Commit Cuando estés satisfecho crea un commit con los cambios que has hecho en en README. Recuerda agregar un mensaje al commit que sea distinto a los anteriores. 6.3.7 Historial de commits Ahora podemos ver los commits creados y ver los cambios hechos desde que comenzamos nuestro proyecto. Si aun estás en la ventana donde creaste el commit selecciona History en la esquina superior izquierda. Si cerraste esa ventana puedes volver a ella seleccionando Commit en el panel Git de RStudio. La mitad superior de la ventana muestra los commits, el autor, la fecha y una llave SHA (este es un identificador único para cada commit). La mitad inferior muestra los cambios hechos en cada commit. Fig. 10. Panel Git: Ventana Commit "],
["git-avanzado-ish.html", "7 Git avanzado-ish 7.1 La Terminal", " 7 Git avanzado-ish de Curating research 7.0.1 Ignorar archivos Ahora que tu proyecto tiene una descripción supon que quieres guardar un artículo en un archivo PDF. Git funciona siguiendo los cambios de archivos de texto plano, por ejemplo, archivo .txt con la descripción del proyecto. Las modificaciones hechas en cualquier archivo binario, por ejemplo, cualquier archivo creado con Microsoft Office, imágenes, PDFs, etc., no serán seguidas por Git. Toma el archivo PDF de la carpeta Recursos y agrégalo a la carpeta en la que has creado tu proyecto. El archivo aparecerá en tu panel Git, pero si vas a la ventana donde realizas Commit y seleccionas el archivo verás que no hay cambios ni contenido en la mitad inferior de la ventana. Fig. 11. Panel Git: Ventana Commit Dado que Git no será capaz de rastrear los cambios hechos en este tipo de archivos, podemos indicarlos para que sean ignorados y no aparezcan en el panel Git. Esto significa que si son modificados Git ignorará los cambios. 7.0.2 .gitignore Git utiliza un archivo de texto plano especial para llevar el registro de qué archivos deben ser ignorados. Este archivo se llama .gitignore y por defecto se encuentra oculto al usuario (puedes verlo en el panel Files de RStudio). RStudio creó este archivo automáticamente cuando creaste el proyecto. Fig. 12. Panel Git: Ventana Commit Este archivo tendrá algo como esto en su interior: .Rproj.user .Rhistory .RData .Ruserdata Cada linea contiene la ruta a un archivo específico, una carpeta, o un patrón que Git debe ignorar. Estas cuatro lineas son agregadas automáticamente por RStudio. A grosso modo, hay tres formas en las que podríamos ignorar archivos PDF (y cualquier otro tipo de archivo). Podríamos agregar alguna de las tres lineas siguientes al final del archivo .gitignore. benedeke2010.pdf: indicando el nombre para ignorar el archivo en particular. *.pdf: indicando la extensión del archivo para ignorar cualquier archivo con esa extensión que se encuentre en cualquier carpeta del repositorio. docs_pdf/*: indicando una carpeta donde almacenaremos los archivos que deben ser ignorados. Elijan cualquiera de estas tres opciones y agregenla al final de .gitignore. Deberían quedar con algo así: .Rproj.user .Rhistory .RData .Ruserdata *.pdf Tras hacer esto en el panel de Git veremos que el archivo .gitignore ha sido modificado y que el archivo PDF ya no se encuentra (porque ha sido ignorado por Git). Haz un commit para registrar el cambio a .gitignore. Recuerda que las rutas a los archivos o carpetas deben ser relativas al directorio de trabajo del proyecto. En este caso mi directorio de trabajo es /home/nicolas/learn2git/. Si el archivo PDF estuviera en la carpeta docs_pdf/ y quisieramos ignorar exclusivamente ese archivo, tendriamos que agregar una linea como la siguiente: docs_pdf/benedeke2010.pdf 7.0.2.1 ¿Qué archivos ignorar? En general, es buena idea ignorar cualquier archivo que no sea texto plano como los archivos con extensión .txt, .doc, .docx, .xls, .png, .jpg, etc. Otra buena idea es ignorar los archivos que son generados automáticamente por nuestro código. 7.0.3 Acceder a versiones pasadas de archivos Una de las funcionalidades más importantes de Git es acceder a versiones pasades de los archivos en un proyecto, o incluso del proyecto entero. Sin embargo, la funcionalidad de Git en RStudio es algo limitada. Si queremos acceder a la versión anterior de un archivo podemos ir al historial de Commits (en el panel Git vamos a Commit y luego a History). Allí podemos seleccionar cualquier commit y en la esquina superior derecha del cuadro inferior seleccionaremos View file @ [código SHA del commit]. El código SHA de un commit es su identigicador único. Veremos cómo recuperar la versión anterior de un archivo, e incluso del proyecto en su totalidad, cuando veamos como usar Git a través de la terminal. Traducción con leves modificaciones de http://happygitwithr.com/shell.html#shell 7.1 La Terminal Puede que te acostumbres a desarrollar la mayoría de tu trabajo utilizando algún cliente gráfico, como RStudio o GitKraken, sin embargo, en algún momento necesitas utilizar la terminal para liberar todas las potencialidades de Git. También es posible que en el futuro prefieras utilizar únicamente la terminal para desarrollar tu trabajo con Git. 7.1.1 Qué es la terminal? La terminal (a pesar de que no son exactamente lo mismo, también puedes referirte a la terminal como shell, linea de comandos, consola). La terminal te permite trabajar de forma rápida, concisa, aunque algo abstracta en comparación con cualquier interfaz gráfica. En el caso de que utilices una interfaz gráfica, la terminal realiza todo el trabajo tras los clicks en la interfaz gráfica. 7.1.2 Iniciando la terminal En Rstudio pueden abrir la terminal a través de Tools &gt; Terminal o Tools &gt; Shell. La diferencia es que el primero abre una terminal dentro de RStudio, mientras que la segunda abre una terminal externa a RStudio. En ambos casos lo más probable es que la terminal utilice el directerior del proyecto para inciciar la terminal. En la terminal podrás ver el nombre del usuario y grupo con el que se ha iniciado la terminal y luego el directorio actual. 7.1.3 Windows, la manzana podrida 7.1.3.1 Git Bash En Windows tienes al meno 4 posible terminales que puedes usar. Sin entrar en demasiado detalle, siempre querrás utilizar la terminal Git Bash. En el mejor de los mundos posibles esta será la terminal que RStudio abrirá cuando inicies la terminal. En la ventana debería decir MSYS (o MINGW64) al comienzo de izquierda a derecha. Si vez una ventana distinta al iniciar la terminal desde RStudio, puedes cambiar el comportamiento que RStudio tiene con la terminal en Tools &gt; Global &gt; Options &gt; Terminal. En caso de que no aparezca Git Bash entre las opciones probablemente ha salido algo mal en la instalación de Git. 7.1.3.2 Command prompt Esta es la terminal nativa de Windows. Si vez en la ventana cmd.exe has dado con la terminal incorrecta. 7.1.3.3 Power shell Otra terminal, más moderna que el Command prompt, es el Power Shell. Si puedes vez powershell.exe en la ventana es porque has dado con esta terminal. "]
]
